{"version":3,"sources":["ThemeContext.js","useTime.js","AnalogueClock.js","DigitalClock.js","Clock.js","Controls.js","App.js","index.js"],"names":["ThemeContext","createContext","themes","light","background","foreground","contrast","dark","useTheme","themeName","useContext","getTimestamp","Math","round","Date","now","useTime","useState","timestamp","setTimestamp","useEffect","interval","updateTime","setInterval","clearInterval","date","seconds","getSeconds","minutes","getMinutes","hours","getHours","AnalogueClock","lines","i","push","cx","cy","r","fill","map","angle","x1","y1","x2","y2","strokeWidth","stroke","transform","DigitalClock","unit","floor","value","x","y","width","height","rx","ry","fontSize","fontFamily","textAnchor","toString","padStart","Clock","type","viewBox","Controls","setType","theme","setTheme","className","name","id","checked","onChange","e","target","htmlFor","App","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.979c495e.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\n\nexport const ThemeContext = createContext('light');\n\nconst themes = {\n  light: {\n    background: \"white\",\n    foreground: \"black\",\n    contrast: \"red\"\n  },\n  dark: {\n    background: \"black\",\n    foreground: \"white\",\n    contrast: \"red\"\n  }\n};\n\n/** \n * @returns {{background: string, foreground: string, contrast: string}}\n */\nexport function useTheme() {\n  const themeName = useContext(ThemeContext);\n\n  return themes[themeName] || themes.light;\n}","import { useState, useEffect } from \"react\";\n\nfunction getTimestamp() {\n  return Math.round(Date.now() / 1000);\n}\n\n/**\n * @returns {{hours: number, minutes: number, seconds: number}}\n */\nexport default function useTime() {\n  const [timestamp, setTimestamp] = useState(getTimestamp);\n\n  useEffect(() => {\n    var interval;\n\n    function updateTime() {\n      setTimestamp(getTimestamp());\n    }\n\n    interval = setInterval(updateTime, 100);\n    updateTime();\n    return () => clearInterval(interval);\n  }, []);\n\n  var date = new Date(timestamp * 1000);\n\n  return {\n    seconds: date.getSeconds(),\n    minutes: date.getMinutes(),\n    hours: date.getHours()\n  };\n}","import { useTheme } from \"./ThemeContext\";\nimport useTime from \"./useTime\";\n\nexport default function AnalogueClock() {\n  const { foreground, background, contrast } = useTheme();\n  const { hours, minutes, seconds } = useTime();\n\n  const lines = [];\n  for (var i = 1; i <= 12; i++) {\n    lines.push(i * (360 / 12));\n  }\n\n  return (<>\n    <circle cx={50} cy={50} r={50} fill={background} />\n\n    {lines.map(angle => <line\n      x1={50} y1={5}\n      x2={50} y2={15}\n      strokeWidth={5}\n      stroke={foreground}\n      transform={`rotate(${angle}, 50, 50)`}\n      key={angle}\n    />)}\n\n    <line\n      x1={50} y1={5}\n      x2={50} y2={70}\n      strokeWidth={3}\n      stroke={contrast}\n      transform={`rotate(${(seconds / 60 * 360)}, 50, 50)`}\n    />\n\n    <line\n      x1={50} y1={5}\n      x2={50} y2={60}\n      strokeWidth={5}\n      stroke={foreground}\n      transform={`rotate(${(minutes / 60 * 360)}, 50, 50)`}\n    />\n\n    <line\n      x1={50} y1={30}\n      x2={50} y2={55}\n      strokeWidth={5}\n      stroke={foreground}\n      transform={`rotate(${(hours / 12 * 360)}, 50, 50)`}\n    />\n  </>);\n}","import { useTheme } from \"./ThemeContext\";\nimport useTime from \"./useTime\";\n\nexport default function DigitalClock() {\n  const { foreground, background } = useTheme();\n  const { hours, minutes, seconds } = useTime();\n\n  const unit = Math.floor(seconds / 5) % 3;\n  const value = [hours, minutes, seconds][unit];\n\n  return (\n    <>\n      <rect x={0} y={0} width={100} height={100} rx={20} ry={20} fill={background} />\n\n      <text x={50} y={60} fontSize={60} fontFamily=\"monospace\" textAnchor=\"middle\" fill={foreground}>\n        {value.toString().padStart(2, '0')}\n      </text>\n\n      <circle cx={20 + 30 * unit} cy={80} r={8} fill={foreground} />\n    </>\n  );\n}","import AnalogueClock from \"./AnalogueClock\";\nimport DigitalClock from \"./DigitalClock\";\n\n/**\n * @param {object} params\n * @param {string} params.type\n * @returns \n */\nexport default function Clock({ type }) {\n  return (\n    <svg viewBox=\"0 0 100 100\">\n      {type === \"analogue\" && <AnalogueClock />}\n      {type === \"digital\" && <DigitalClock />}\n    </svg>\n  );\n}","import \"./Controls.css\";\n\n/**\n * @param {object} params\n * @param {string} params.type\n * @param {(v: string) => void} params.setType\n * @param {string} params.theme\n * @param {(v: string) => void} params.setTheme\n */\nexport default function Controls({ type, setType, theme, setTheme }) {\n  return (\n    <form>\n      <h2>Type</h2>\n\n      <div className=\"radio-group\">\n        <input type=\"radio\" name=\"type\" value=\"analogue\" id=\"type-analogue\" checked={type === \"analogue\"} onChange={e => setType(e.target.value)} />\n        <label htmlFor=\"type-analogue\">Analogue</label>\n\n        <input type=\"radio\" name=\"type\" value=\"digital\" id=\"type-digital\" checked={type === \"digital\"} onChange={e => setType(e.target.value)} />\n        <label htmlFor=\"type-digital\">Digital</label>\n      </div>\n\n      <h2>Theme</h2>\n\n      <div className=\"radio-group\">\n        <input type=\"radio\" name=\"theme\" value=\"light\" id=\"theme-light\" checked={theme === \"light\"} onChange={e => setTheme(e.target.value)} />\n        <label htmlFor=\"theme-light\">Light</label>\n\n        <input type=\"radio\" name=\"theme\" value=\"dark\" id=\"theme-dark\" checked={theme === \"dark\"} onChange={e => setTheme(e.target.value)} />\n        <label htmlFor=\"theme-dark\">Dark</label>\n      </div>\n    </form >\n  );\n}","import { useState } from \"react\";\nimport SVGIcon from \"react-svg-favicon\";\n\nimport Clock from \"./Clock\";\nimport Controls from \"./Controls\";\n\nimport { ThemeContext } from \"./ThemeContext\";\n\nimport './App.css';\n\nexport default function App() {\n  const [type, setType] = useState(\"analogue\");\n  const [theme, setTheme] = useState(\"light\");\n\n  return (\n    <main>\n      <ThemeContext.Provider value={theme}>\n        <Clock type={type} />\n\n        <SVGIcon>\n          <Clock type={type} />\n        </SVGIcon>\n\n        <Controls\n          type={type} setType={setType}\n          theme={theme} setTheme={setTheme}\n        />\n      </ThemeContext.Provider>\n    </main>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}